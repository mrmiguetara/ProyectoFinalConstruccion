// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(GeneratorDbContext))]
    partial class GeneratorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Core.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Subject");

                    b.Property<string>("Teacher");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Core.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Options");

                    b.Property<int>("QuestionTypeId");

                    b.Property<int>("SectionId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SectionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Core.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2019, 6, 23, 22, 5, 27, 732, DateTimeKind.Local).AddTicks(2380),
                            Type = "Verdadero o Falso",
                            Updated = new DateTime(2019, 6, 23, 22, 5, 27, 738, DateTimeKind.Local).AddTicks(7300)
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2019, 6, 23, 22, 5, 27, 738, DateTimeKind.Local).AddTicks(8340),
                            Type = "Seleccion Multiple",
                            Updated = new DateTime(2019, 6, 23, 22, 5, 27, 738, DateTimeKind.Local).AddTicks(8350)
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2019, 6, 23, 22, 5, 27, 738, DateTimeKind.Local).AddTicks(8360),
                            Type = "Seleccion Simple",
                            Updated = new DateTime(2019, 6, 23, 22, 5, 27, 738, DateTimeKind.Local).AddTicks(8360)
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2019, 6, 23, 22, 5, 27, 738, DateTimeKind.Local).AddTicks(8360),
                            Type = "Completa",
                            Updated = new DateTime(2019, 6, 23, 22, 5, 27, 738, DateTimeKind.Local).AddTicks(8360)
                        });
                });

            modelBuilder.Entity("Core.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int>("ExamId");

                    b.Property<string>("Instruction")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Core.Models.Question", b =>
                {
                    b.HasOne("Core.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Section", b =>
                {
                    b.HasOne("Core.Models.Exam", "Exam")
                        .WithMany("Sections")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
